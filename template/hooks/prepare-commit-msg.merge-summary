#!/usr/bin/env python

import os
import re
import sys
import subprocess
import collections

class CommitMessageFormatter(object):

    commit_id_length = 12

    def __init__(self, args):
        self.args = args
        self.include_diff_stat = False
    
    def run(self):
        if not self.is_merge():
            return
        
        message_file_path = self.commit_message_file_path()
        with open(message_file_path) as f: message_lines = f.readlines()

        merge_line_match = re.match(r"Merge (?:branch|commit) '(.+)'(?: into (.+))?", message_lines[0])
        if not merge_line_match:
            return

        source_branch = merge_line_match.group(1)
        destination_branch = merge_line_match.group(2)
        if not destination_branch:
            destination_branch = self.current_git_branch()
            if not destination_branch:
                return
       
        commit_list = self.commit_list(source_branch, destination_branch)

        if not commit_list:
            merge_summary_text = None
        if self.include_diff_stat:
            diff_stat = self.diff_stat()
            merge_summary_text = '\nMerged commits:\n\n{}\n\nChanged files summary:\n\n{}'.format(commit_list, diff_stat)
        else:
            merge_summary_text = '\nMerged commits:\n\n{}\n\n'.format(commit_list)

        if merge_summary_text:
            message_lines[1:1] = merge_summary_text
        new_message_text = ''.join(message_lines)
        
        with open(message_file_path, 'w') as f:
            f.write(new_message_text)
        
    def current_git_branch(self):
        cmd = ['git', 'branch']
        branch_list = subprocess.check_output(cmd).splitlines()
        current_branch = [b for b in branch_list if b.startswith('*')]
        if not current_branch and len(current_branch[0]) > 2:
            return None
        current_branch = current_branch[0][2:]
        if 'no branch' in current_branch:
            return None
        return current_branch

    def commit_list(self, source_branch, destination_branch):
        cmd = ['git', 'log', '--format=format:%H  %ai [%ae] %s', source_branch, '^' + destination_branch]
        commit_list = subprocess.check_output(cmd).splitlines()

        CommitInfo = collections.namedtuple('CommitInfo', 'commit_id timestamp author subject'.split())

        commits = []
        for line in commit_list:
            items = re.findall(r'^(\w+)  (....-..-.. ..:..):.. ..... \[(.+?)] (.+)$', line)
            if not (len(items) > 0 and len(items[0]) == 4):
                print >> sys.stderr, 'Skipping log line in unexpected format: "{}", parsed items = {}'.format(line, items)
                continue
            commit_id, timestamp, author, subject = items[0]
            commit_id = commit_id[:self.commit_id_length]
            author = author.split('@')[0]
            commits.append(CommitInfo(commit_id, timestamp, author, subject))

        if not commits:
            return ''

        commit_list = []
        max_username_length = len(max(commits, key=lambda c: len(c.author)).author)
        for commit in commits:
            commit_list.append('{1}  {2}  [{3:<{0}}] {4}'.format(max_username_length, commit.commit_id, commit.timestamp, commit.author, commit.subject))
        
        return '\n'.join(commit_list)

    def diff_stat(self):
        cmd = ['git', 'diff', '--cached', '--stat']
        diff_stat = subprocess.check_output(cmd)
        return diff_stat

    def is_merge(self):
        return 'merge' in self.args
    
    def commit_message_file_path(self):
        return self.args[1]

    @classmethod
    def main(cls):
        cls(sys.argv).run()



if __name__ == '__main__':
    CommitMessageFormatter.main()

